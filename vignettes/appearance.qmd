---
title: "Themes and Styles"
format: html
---


```{css, echo=FALSE}
.table, th, td {
  font-size: 0.9em;
} 
.table tbody td, .table thead tr {
    white-space: nowrap;
}
```
```{r}
#| include: false
options(width = 10000)
options("tinytable_theme_placement_latex_float" = "H")
```

To customize the appearance of tables, `modelsummary` supports five of the most popular table-making packages: 

1. [`tinytable`: https://vincentarelbundock.github.io/tinytable/](https://vincentarelbundock.github.io/tinytable/)
2. [`gt`: https://gt.rstudio.com](https://gt.rstudio.com)
3. [`kableExtra`: http://haozhu233.github.io/kableExtra](http://haozhu233.github.io/kableExtra)
4. [`huxtable`: https://hughjonesd.github.io/huxtable/](https://hughjonesd.github.io/huxtable/)
5. [`flextable`: https://davidgohel.github.io/flextable/](https://davidgohel.github.io/flextable/)
6. [`DT`: https://rstudio.github.io/DT](https://rstudio.github.io/DT)

Users are encouraged to visit these websites to determine which package suits their needs best.

To create customized tables, we proceed as follows:

1. Call a `modelsummary` function like `datasummary()`.
2. Use the `output` argument to specify the package to be used for customization, such as `output="tinytable"` or `output="gt"`.
3. Apply a function from the package in question to the object created by `modelsummary`.

To illustrate, we download data from the [Rdatasets repository](https://vincentarelbundock.github.io/Rdatasets') and we estimate 5 models:

```{r}
#| message: false
library(modelsummary)

url <- "https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Guerry.csv"
dat <- read.csv(url, na.strings = "")

models <- list(
    I = lm(Donations ~ Literacy, data = dat),
    II = lm(Crime_pers ~ Literacy, data = dat),
    III = lm(Crime_prop ~ Literacy + Clergy, data = dat),
    IV = glm(Crime_pers ~ Literacy + Clergy, family = poisson, data = dat),
    V = glm(Donations ~ Literacy + Clergy, family = poisson, data = dat)
)
```

In the rest of this vignette, we will customize tables using tools `tinytable` and `gt`. The same process can be used to customize `kableExtra`, `flextable`, `huxtable`, and `DT` tables.

# `tinytable`

The `tinytable` package offers many functions to customize the appearance of tables. Below, we give a couple illustrations, but interested readers should refer to the detailed tutorial on the `tinytable` package website:  https://vincentarelbundock.github.io/tinytable/

In this example, we use the `group_tt()` function to add spanning column headers, and the `style_tt()` function to color a few cells of the table:

```{r}
library(tinytable)

modelsummary(models) |>
    group_tt(j = list(Linear = 2:4, Poisson = 5:6)) |>
    style_tt(i = 3:4, j = 2, background = "teal", color = "white", bold = TRUE)
```

Now, we create a descriptive statistics table with `datasummary()`. That table includes an emptyr row, which we fill with density plots using the `plot_tt()` function from `tinytable`:

```{r}
Density <- function(x) ""

datasummary(mpg + hp ~ Mean + SD + Density, data = mtcars) |>
    plot_tt(
        j = 4,
        fun = "density",
        data = list(mtcars$mpg, mtcars$hp),
        color = "#E69F00")
```

::: {.content-visible when-format="html"}
HTML tables can be further customized in `tinytable` by specifying CSS rules. Again, [detailed tutorials are available on the `tinytable` website.](https://vincentarelbundock.github.io/tinytable/) This example adds an image in the background of a table:

```{r}
css <- "
.mytable {
  background-size: cover;
  background-position: center;
  background-image: url('https://user-images.githubusercontent.com/987057/82732352-b9aabf00-9cda-11ea-92a6-26750cf097d0.png');
  --bs-table-bg: transparent;
}
"

modelsummary(models) |>
    style_tt(
        bootstrap_class = "table table-borderless mytable", 
        bootstrap_css_rule = css)
```
:::


## Dot alignement in LaTeX

Sometimes, dot-alignment fails in LaTeX because some cells include only text. In other cases, users wish to prevent dot-alignment for specific cells. This can be achieved by using the `tinytable::style_tt()` function to insert `tabularray` instructions in to the raw LaTeX table. Here, we create a regression table for a `fixest` model. The output includes a text-only row which identifies fixed effects. We call `style_tt()` to "guard" and center the text in the relevant cells.

```{r}
library(fixest)
library(tinytable)
library(modelsummary)
m <- feols(mpg ~ wt + factor(cyl) | carb, data = mtcars)
modelsummary(m, align = "ld") |>
  theme_latex(tabularray_inner = "cell{16-17}{2}={guard,halign=c}")
```

## Removing elements (e.g. horizontal rules)

When `modelsummary()` creates a `tinytable`, it fixes a few styling elements immediately, which can cause minor issues when customizing the table further. For example, `modelsummary()` draws a separator line to distinguish the coefficients and goodness-of-fit statistics, but this line is drawn at a hard-coded position in the table. If users call `tinytable` functions to add rows *after the fact*, the separator line may no longer appear in the correct place.

One way to work around this issue is to manually "flush" all the stylings that `modelsummary()` inserted, to start fresh.

To start, notice that added group labels breaks the location of the separator line:

```{r}
library(modelsummary)
library(tinytable)
mod <- lm(mpg ~ hp + factor(cyl), data = mtcars)
tab <- modelsummary(mod)
tab |> group_tt(i = list("Coefs" = 1, "Cylinders" = 5))
```

To fix this, we create the table, remove styles with the `strip_tt()` function, and then add new ones:

```{r}
modelsummary(mod) |>
    strip_tt(line = TRUE) |>
    group_tt(i = list("Coefs" = 1, "Cylinders" = 5)) |>
    style_tt(i = 10, line = "b", line_color = "lightgray")
```

# `gt`

To illustrate how to customize tables using the `gt` package we will use the following functions from the `gt` package:

* `tab_spanner` creates labels to group columns.
* `tab_footnote` adds a footnote and a matching marking in a specific cell.
* `tab_style` can modify the text and color of rows, columns, or cells.

To produce a "cleaner" look, we will also use `modelsummary`'s `stars`, `coef_map`, `gof_omit`, and `title` arguments.

Note that in order to access `gt` functions, we must first load the library.

```{r}
library(gt)

## build table with `modelsummary` 
cm <- c( '(Intercept)' = 'Constant', 'Literacy' = 'Literacy (%)', 'Clergy' = 'Priests/capita')
cap <- 'A modelsummary table customized with gt'

tab <- modelsummary(models, 
                output = "gt",
                coef_map = cm, stars = TRUE, 
                title = cap, gof_omit = 'IC|Log|Adj') 

## customize table with `gt`

tab %>%

    # column labels
    tab_spanner(label = 'Donations', columns = 2:3) %>%
    tab_spanner(label = 'Crimes (persons)', columns = 4:5) %>%
    tab_spanner(label = 'Crimes (property)', columns = 6) %>%

    # footnote
    tab_footnote(footnote = md("A very **important** variable."),
                 locations = cells_body(rows = 3, columns = 1)) %>%

    # text and background color
    tab_style(style = cell_text(color = 'red'),
              locations = cells_body(rows = 3)) %>%
    tab_style(style = cell_fill(color = 'lightblue'),
              locations = cells_body(rows = 5))
```

The [`gt` website](https://gt.rstudio.com) offers many more examples. The possibilities are endless. For instance, `gt` allows you to embed images in your tables using the `text_transform` and `local_image` functions:

```{r}
f <- function(x) web_image(url = "https://user-images.githubusercontent.com/987057/82732352-b9aabf00-9cda-11ea-92a6-26750cf097d0.png", height = 80)

tab %>% 
    text_transform(locations = cells_body(columns = 2:6, rows = 1), fn = f)
```


# Themes

If you want to apply the same post-processing functions to your tables, you can use `modelsummary`'s theming functionality. To do so, we first create a function to post-process a table. This function must accept a table as its first argument, and include the ellipsis (`...`). Optionally, the theming function can also accept an `hrule` argument which is a vector of row positions where we insert horizontal rule, and an `output_format` which allows output format-specific customization. For inspiration, you may want to consult the default `modelsummary` themes in the [`themes.R` file of the Github repository.](https://github.com/vincentarelbundock/modelsummary)

Once the theming function is created, we assign it to a global option called `modelsummary_theme_kableExtra`, `modelsummary_theme_gt`, `modelsummary_theme_flextable`, or `modelsummary_theme_huxtable`. For example, if you want to add row striping to all your `gt` tables:

```{r}
library(gt)

## The ... ellipsis is required!
custom_theme <- function(x, ...) {
    x %>% gt::opt_row_striping(row_striping = TRUE)
}
options("modelsummary_theme_gt" = custom_theme)

mod <- lm(mpg ~ hp + drat, mtcars)
modelsummary(mod, output = "gt")
```

```{r}
url <- 'https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv'
penguins <- read.csv(url, na.strings = "")

datasummary_crosstab(island ~ sex * species, output = "gt", data = penguins)
```

Restore default theme:

```{r}
options("modelsummary_theme_gt" = NULL)
```

## Themes: Data Frame

A particularly flexible strategy is to apply a theme to the `dataframe` output format. To illustrate, recall that setting `output="dataframe"` produces a data frame with a lot of extraneous meta information. To produce a nice table, we have to process that output a bit:

```{r}
mod <- lm(mpg ~ hp + drat, mtcars)

modelsummary(mod, output = "dataframe")
```

`modelsummary` supports the `DT` table-making package out of the box. But for the sake of illustration, imagine we want to create a table using the `DT` package with specific customization and options, in a repeatable fashion. To do this, we can create a theming function:

```{r}
library(DT)

theme_df <- function(tab) {
    out <- tab
    out$term[out$statistic == "modelsummary_tmp2"] <- " "
    out$part <- out$statistic <- NULL
    colnames(out)[1] <- " "
    datatable(out, rownames = FALSE,
              options = list(pageLength = 30))
}

options("modelsummary_theme_dataframe" = theme_df)
modelsummary(mod, output = "dataframe")
```

Restore default theme:

```{r}
options("modelsummary_theme_dataframe" = NULL)
```

# Variable labels

Some packages like `haven` can assign attributes to the columns of a dataset for use as labels. Most of the functions in `modelsummary` can display these labels automatically. For example:

```{r}
library(haven)
dat <- mtcars
dat$am <- haven::labelled(dat$am, label = "Transmission")
dat$mpg <- haven::labelled(dat$mpg, label = "Miles per Gallon")
mod <- lm(hp ~ mpg + am, dat = dat)

modelsummary(mod, coef_rename = TRUE)

datasummary_skim(dat[, c("mpg", "am", "drat")])
```

# Warning: Saving to file

When users supply a file name to the `output` argument, the table is written immediately to file. This means that users cannot post-process and customize the resulting table using functions from `gt`, `kableExtra`, `huxtable`, or `flextable`. When users specify a filename in the `output` argument, the `modelsummary()` call should be the *final* one in the chain.

This is OK:

```{r, eval=FALSE}
modelsummary(models, output = 'table.html')
```

This is **not** OK:

```{r, eval=FALSE}
library(tinytable)
modelsummary(models, output = 'table.html') |>
    group_tt(j = list(Literacy = 2:3))
```

To save a customized table, you should apply all the customizations you need before saving it using dedicated package-specific functions:

* `tinytable::save_tt()`
* `gt::gtsave()`
* `kableExtra::save_kable()`

For example, to add color column spanners with the `gt` package:

```{r, eval=FALSE}
library(tinytable)
modelsummary(models, output = 'tinytable') |>
    group_tt(j = list(Literacy = 2:3)) |>
    save_tt("table.html")
```


## LaTeX significance stars

When rendering a notebook to PDF or saving a table to LaTeX, `modelsummary` will automatically wrap the stars identifiers in the footnote in a `siunitx` `\num{}` tag. This ensures proper rendering. Unfortunately, when saving the table to file using `save_tt()`, `modelsummary` does not know *ex ante* what the ultimate file format will be, so it cannot automatically wrap the stars.

One alternative is to turn off the stars footnote using a global option, and then supply the stars indicators manually in the `notes` argument.

```r
library(tinytable)
library(modelsummary)
x <- rnorm(1e6)
y <- x + rnorm(1e6)
m <- lm(y ~ x)
sn <- "+ \\num{< 0.1}, * \\num{p< 0.05}, ** \\num{p<0.01}, *** \\num{p<0.001}"
options(modelsummary_stars_note = FALSE)
modelsummary(m, notes = sn, stars = TRUE) |> save_tt("latex")
```

## Math

To render math in `modelsummary` in HTML files, you need to ensure that MathJax is enabled. See the [`tinytable` documentation for more details.](https://vincentarelbundock.github.io/tinytable/vignettes/format.html#math)

Here is a minimal example:

```{r}
options(tinytable_html_mathjax = TRUE)
mod <- lm(mpg ~ factor(cyl) - 1, data = mtcars)
cr <- c("factor(cyl)4" = "$\\beta_1$", "factor(cyl)6" = "$\\beta_2$", "factor(cyl)8" = "$\\beta_3$")
modelsummary(mod, coef_map = cr)
```
